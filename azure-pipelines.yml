trigger:
  branches:
    include:
    - refs/heads/main
  batch: True

resources:
- repo: self

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isRelease: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')]

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'c3dcf114-3b01-4424-bee8-4c608be4829b'
  imageRepository: 'code-build-deploy-blogs'
  containerRegistry: 'codebuilddeploy.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/src/CodeBuildDeploy.Blogs/Dockerfile'
  resourceGroup: 'codebuilddeploy-rg'
  containerAppName: 'codebuilddeploy-blogs'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Versioning
  major: 1
  minor: 1
  ${{ if or(eq(variables['isMain'], 'true'), eq(variables['isRelease'], 'true')) }}:
    patch: $[counter(format('{0}.{1}', variables['major'], variables['minor']), 0)]
    version.assembly: $[format('{0}.{1}.{2}', variables['major'], variables['minor'], variables['patch'])]
    version.file: $[format('{0}.{1}', variables['version.assembly'], variables['Build.BuildId'])]
    version.informational: $[variables['version.file']]
  ${{ if and(ne(variables['isMain'], 'true'), ne(variables['isRelease'], 'true')) }}:
    patch: 0
    version.assembly: $[format('{0}.{1}.{2}', variables['major'], variables['minor'], variables['patch'])]
    version.file: $[format('{0}.{1}', variables['version.assembly'], variables['Build.BuildId'])]
    version.informational: $[format('{0}-{1}', variables['version.assembly'], variables['Build.SourceBranchName'])]
  build.number: $[variables['version.informational']]

name: $[variables['build.number']]

stages:
- stage: Build
  displayName: Build and push Blogs service
  jobs:
  - job: Build
    displayName: Docker Build and Deploy Blogs service
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self
      displayName: 'Checkout Blogs Repo'
      persistCredentials: true

    - task: NuGetAuthenticate@1
      displayName: 'Authenticate to NuGet'

    - task: Docker@2
      displayName: Docker Build
      inputs:
        command: build
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)
        tags: |
          latest
          $(Build.BuildNumber)
        Dockerfile: $(dockerfilePath)
        buildContext: .
        arguments: '--build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN) --build-arg VERSION=$(Build.BuildNumber) --build-arg ASSEMBLY_VERSION=$(version.assembly) --build-arg FILE_VERSION=$(version.file) --build-arg INFORMATIONAL_VERSION=$(Build.BuildNumber) --build-arg PACKAGE_VERSION=$(Build.BuildNumber)'

    - task: Docker@2
      displayName: Docker Push
      inputs:
        command: push
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)
        tags: |
          latest
          $(Build.BuildNumber)

    - script: |
        git tag $(Build.BuildNumber)
        git push origin $(Build.BuildNumber)
      workingDirectory: $(Build.SourcesDirectory)
      condition: and(or(eq(variables['Build.SourceBranchName'], 'main'), startsWith(variables['Build.SourceBranchName'], 'release')), succeeded())
      displayName: Tag Version in Git

- stage: DeployProd
  displayName: Deploy Blogs service Prod
  jobs:
  - job: DeployProd
    displayName: Deploy Blogs service Prod
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: AzureContainerApps@1
      displayName: 'Azure Container App Deploy: codebuilddeploy'
      inputs:
        azureSubscription: 'Visual Studio Premium with MSDN (a8c29995-b368-4d2a-b32a-db619e53639d)'
        containerAppName: $(containerAppName)
        resourceGroup: $(resourceGroup)
        imageToDeploy: '$(containerRegistry)/$(imageRepository):$(Build.BuildNumber)'
        targetPort: '8080'
...
