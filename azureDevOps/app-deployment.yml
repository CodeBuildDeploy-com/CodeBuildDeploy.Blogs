parameters:
- name: azureDevOpsEnvironment
  type: string
- name: azureSubscription
  type: string
- name: acrRepositoryConnect
  type: string
- name: containerRegistry
  type: string
- name: platformEnv
  type: string
- name: appEnv
  type: string
- name: serviceNameKebabCase
  type: string
- name: serviceVersion
  type: string

jobs:
- deployment: Deploy
  displayName: "Deploy ${{ parameters.azureDevOpsEnvironment }}"
  environment: "${{ parameters.azureDevOpsEnvironment }}"
  variables:
  - name: Kubernetes.Namespace
    value: cbd-${{ parameters.platformEnv }}-${{ parameters.appEnv }}
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: none

        - task: Kubernetes@1
          displayName: Create K8s Namespace
          inputs:
            connectionType: 'Azure Resource Manager'
            azureSubscriptionEndpoint: "${{ parameters.azureSubscription }}"
            azureResourceGroup: "cbd-${{ parameters.platformEnv }}-rg"
            kubernetesCluster: "cbd-${{ parameters.platformEnv }}-aks-cluster"
            useClusterAdmin: true
            command: 'apply'
            useConfigurationFile: true
            configurationType: 'inline'
            inline: |
              apiVersion: v1
              kind: Namespace
              metadata:
                name: $(Kubernetes.Namespace)
            secretType: 'dockerRegistry'
            containerRegistryType: 'Azure Container Registry'

        - task: KubernetesManifest@1
          displayName: Create Docker Secret to pull images from ACR
          inputs:
            connectionType: azureResourceManager
            azureSubscriptionConnection: "${{ parameters.azureSubscription }}"
            azureResourceGroup: "cbd-${{ parameters.platformEnv }}-rg"
            kubernetesCluster: "cbd-${{ parameters.platformEnv }}-aks-cluster"
            useClusterAdmin: true
            action: createSecret
            secretType: dockerRegistry
            secretName: "cbd-${{ parameters.platformEnv }}-pull-secret"
            dockerRegistryEndpoint: "${{ parameters.acrRepositoryConnect }}"
            namespace: "$(Kubernetes.Namespace)"

        - task: Kubernetes@1
          displayName: Create K8s secrets
          inputs:
            connectionType: 'Azure Resource Manager'
            azureSubscriptionEndpoint: "${{ parameters.azureSubscription }}"
            azureResourceGroup: "cbd-${{ parameters.platformEnv }}-rg"
            kubernetesCluster: "cbd-${{ parameters.platformEnv }}-aks-cluster"
            useClusterAdmin: true
            namespace: "$(Kubernetes.Namespace)"
            secretType: 'generic'
            secretArguments: >
                --from-literal=ConnectionStrings__BlogConnection="$(ConnectionStrings_BlogConnection)"
            secretName: "cbd-${{ parameters.appEnv }}-blogs-secret"

        - task: AzureCLI@2
          displayName: ACR Login
          inputs:
            azureSubscription: "${{ parameters.azureSubscription }}"
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              az acr login --name ${{ parameters.containerRegistry }}

        - task: HelmDeploy@0
          inputs:
            connectionType: 'Azure Resource Manager'
            azureSubscription: "${{ parameters.azureSubscription }}"
            azureResourceGroup: "cbd-${{ parameters.platformEnv }}-rg"
            kubernetesCluster: "cbd-${{ parameters.platformEnv }}-aks-cluster"
            useClusterAdmin: true
            command: 'upgrade'
            install: true
            namespace: "$(Kubernetes.Namespace)"
            releaseName: "${{ parameters.appEnv }}-${{ parameters.serviceNameKebabCase }}"
            chartType: 'Name'
            chartName: "oci://$(containerRegistry)/helm/${{ parameters.serviceNameKebabCase }}"
            chartVersion: "${{ parameters.serviceVersion }}"
            overrideValues: |
              env.name=${{ parameters.appEnv }}
              env.shortName=${{ parameters.appEnv }}